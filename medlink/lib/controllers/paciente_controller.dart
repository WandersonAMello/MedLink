// lib/controllers/paciente_controller.dart (VERS√ÉO ATUALIZADA)

import 'package:flutter/material.dart';
import '../models/paciente.dart';
import '../models/consultas.dart' as consultas_model; // Importa o modelo de consulta
import '../services/api_service.dart';

class PacienteController extends ChangeNotifier {
  final ApiService _apiService = ApiService();

  // Estados para a lista de pacientes do dia
  List<Paciente> pacientes = [];
  int _selectedIndex = -1; 
  bool isLoading = true;
  String? errorMessage;

  // --- NOVOS ESTADOS PARA A ANOTA√á√ÉO ---
  String anotacaoAtual = "";
  bool isAnotacaoLoading = false;
  bool isSaving = false; // Para o bot√£o de salvar

  // --- NOVOS ESTADOS PARA O HIST√ìRICO ---
  List<consultas_model.Consulta> historicoConsultas = [];
  bool isHistoricoLoading = false;
  String? historicoErrorMessage;

  int get selectedIndex => _selectedIndex;
  Paciente? get pacienteSelecionado {
    if (_selectedIndex >= 0 && _selectedIndex < pacientes.length) {
      return pacientes[_selectedIndex];
    }
    return null;
  }

  PacienteController() {
    fetchPacientesDoDia();
  }

  Future<void> fetchPacientesDoDia() async {
    // ... (este m√©todo continua igual)
    isLoading = true;
    errorMessage = null;
    notifyListeners();

    try {
      pacientes = await _apiService.getPacientesDoDia();
      if (pacientes.isNotEmpty) {
        // Ao carregar a lista, j√° busca o hist√≥rico do primeiro paciente
        selecionarPaciente(0); 
      } else {
        _selectedIndex = -1;
      }
    } catch (e) {
      errorMessage = e.toString();
    } finally {
      isLoading = false;
      notifyListeners();
    }
  }

  // üëá ADICIONE ESTE NOVO M√âTODO üëá
  Future<bool> finalizarConsulta(String conteudo) async {
    if (pacienteSelecionado == null) return false;

    isSaving = true; // Reutiliza o estado de 'salvando'
    notifyListeners();

    try {
      // Usa o ID correto da consulta que adicionamos ao modelo
      final consultaId = pacienteSelecionado!.consultaId;
      await _apiService.finalizarConsulta(consultaId, conteudo);

      // Limpa a anota√ß√£o atual para o pr√≥ximo paciente
      anotacaoAtual = "";

      // Remove o paciente da lista da esquerda, pois a consulta foi conclu√≠da
      pacientes.removeWhere((p) => p.id == pacienteSelecionado!.id);
      
      // Se ainda houver pacientes, seleciona o pr√≥ximo. Sen√£o, limpa a sele√ß√£o.
      if (pacientes.isNotEmpty) {
        // Seleciona o primeiro da lista restante para n√£o deixar a tela vazia
        selecionarPaciente(0);
      } else {
        _selectedIndex = -1;
      }

      return true;
    } catch (e) {
      print("Erro ao finalizar consulta: $e");
      return false;
    } finally {
      isSaving = false;
      notifyListeners();
    }
  }

   // O M√âTODO selecionarPaciente VOLTA AO NORMAL (REMOVA A LIMPEZA DAQUI)
  void selecionarPaciente(int index) {
    if (index >= 0 && index < pacientes.length) {
      _selectedIndex = index;
      final paciente = pacientes[index];

      // Apenas chama os m√©todos de busca
      _fetchHistorico(paciente.id);
      
      final consultaDeHojeId = paciente.consultaId;
      _fetchAnotacao(consultaDeHojeId); 
      
      notifyListeners();
    }
  }

  // --- CORRE√á√ÉO APLICADA DIRETAMENTE AQUI ---
  // ATUALIZE O M√âTODO _fetchAnotacao PARA ESTA VERS√ÉO:
  Future<void> _fetchAnotacao(int consultaId) async {
    // 1. Limpa imediatamente o estado da anota√ß√£o anterior e avisa a UI.
    // Isso garante que o campo de texto fique em branco enquanto os novos dados s√£o carregados.
    anotacaoAtual = "";
    isAnotacaoLoading = true;
    notifyListeners();

    try {
      // 2. Busca a anota√ß√£o para a nova consulta.
      // O ApiService j√° retorna uma string vazia ("") caso a API retorne 404 (n√£o encontrado).
      final fetchedAnnotation = await _apiService.getAnotacao(consultaId) ?? "";
      
      // 3. Atualiza o estado com o conte√∫do encontrado.
      // Se por acaso uma anota√ß√£o para a consulta de hoje j√° existir, o campo ser√° preenchido.
      // Caso contr√°rio, ele permanecer√° vazio, que √© o comportamento esperado.
      anotacaoAtual = fetchedAnnotation;

    } catch(e) {
      print("Erro ao buscar anota√ß√£o: $e");
      // Mant√©m o campo vazio em caso de qualquer erro.
      anotacaoAtual = "";
    } finally {
      isAnotacaoLoading = false;
      
      // 4. Notifica a UI pela √∫ltima vez com o estado final (ou com a anota√ß√£o do dia, ou vazio).
      notifyListeners();
    }
  }

  // --- NOVO M√âTODO PARA SALVAR A ANOTA√á√ÉO ---
  Future<bool> salvarAnotacao(String conteudo) async {
    if (pacienteSelecionado == null) return false;

    isSaving = true;
    notifyListeners();

    try {
      final consultaId = pacienteSelecionado!.id; // Supondo que o ID coincida
      await _apiService.salvarAnotacao(consultaId, conteudo);
      anotacaoAtual = conteudo; // Atualiza o estado local
      
      // For√ßa a atualiza√ß√£o do hist√≥rico para refletir a nova anota√ß√£o
      _fetchHistorico(pacienteSelecionado!.id);
      
      return true;
    } catch (e) {
      print("Erro ao salvar anota√ß√£o: $e");
      return false;
    } finally {
      isSaving = false;
      notifyListeners();
    }
  }

  // --- NOVO M√âTODO PRIVADO PARA BUSCAR O HIST√ìRICO ---
  Future<void> _fetchHistorico(int pacienteId) async {
    isHistoricoLoading = true;
    historicoErrorMessage = null;
    notifyListeners();

    try {
      historicoConsultas = await _apiService.getHistoricoConsultas(pacienteId);
    } catch (e) {
      historicoErrorMessage = e.toString();
      print("Erro ao buscar hist√≥rico: $e");
    } finally {
      isHistoricoLoading = false;
      notifyListeners();
    }
  }
}